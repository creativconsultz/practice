System level / Global level / Local level for config of GIT
git config --global user.name "name"
git config --global user.email emailid
git config --global credential.username name-value
git config --global core.autocrlf true  // true for Windows,  input for Linux
git config --global core.editor "code --wait"
git config --global diff.tool vscode
git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"
git config --global -e     //opens config file in VS Code
git config -h  //help on config command
git config --global alias.s "status"     // setting up alias. Example git s for git status

File lifecycle:  Untracked ==> Staged ==> Committed

// Initialize git in a particular folder
git init

// add files to staging area or index
git add file1

// committ to repository. Each commit has complete snapshot of the project
git commit -m "initial commit"
git commit  //opens editor to add short description and long description
git commit -am  // add and commit in one step
git commit --amend -m "message"   // add to the last commit

git checkout commithashvalue   // Head points to the specified commit

git status
git status -s

git ls-files   // list files in the staging area

git rm filename  // remove file from work-directory and staging area. Use git commit after this to commit to repository.
git mv sourcefile targetfile  // move file in work directory and in staging area. Use git commit after this to commit to repository.
git rm --cached filename  // Only remove file from staging area. Use git commit after this
git rm --cached -r directory name  // Only remove directory recursively from staging area. Use git commit after this


// Viewing commit history
git log      // press q to quit
git log --all --graph   // press q to quit
git log --oneline
git log --oneline --reverse

// Shows only the  differences in the particular commit
git show HEAD
git show HEAD~1
git show HEAD~1:filename   // shows exact file content in the commit
git ls-tree HEAD~1         // shows all file and directories in the commit


git reset filename   // Remove from stage - unstage
git checkout -- filename   // undo file changes in the working area

git restore --staged filename   // restore file from last commit into the staging area
git restore filename   // restore file in working directory from staging area
git clean -fd  // force clean local changes, untracked file and directories
git restore --source HEAD~1 filename   //restore file to its previous version

git checkout commit-hashvalue           // Head points to the specified commit in version history. Follow by git commit. 
git checkout commit-hashvalue filename  // Restore file to specified previous commit. Follow by git commit.

git branch -a  // List all branches
git branch -D branchname    // Delete the branchname
git branch "branchname"     // create a branch 
git checkout "branchname"   // switch to branch 

git checkout master         //switch to master. HEAD will point ot master branch
git merge featurebranch -m "message"     // merges the changes from feature branch to master. New commit is created on the master branch.

git remote -v  // lists all the remote repository links setup
git remote remove origin   // removes link to remote repository nick-named origin

First create a brand new repository in github
git remote add origin linkofgithubrepo   // origin is a the nickname given. Use HTTPS url.
git checkout master
git push origin master    // pushing the master from local to remote
git checkout featurebranch
git push origin featurebranch  // pushing the featurebranch from local to remote
Create a Pull Request in github (from featurebranch --> master)
Code review and resolve all comments
"Merge Pull Request" in github pull request
git fetch  //to get all updates from github
git log --all --graph  //shows github origin branches also now
git checkout master
git pull origin master  //to pull changes from origin-master branch in github


git push origin master -f  // force push from local to remote


git clone githubrepoURL  <local folder name- optional>
git fetch    // to update local repo version history with the info from github/remote
git pull origin master


// Onboard existing project into git and github
git init  //run inside folder
git add .
git commit -m "initial commit"
git remote add origin linkofgithubrepo
git push origin master

//Starting from github and bringing into local 
git clone URL


git diff --staged   // difference between staging and committed
git diff            // difference between working directory and staging area
git difftool --staged   // Opens in VSCode
git difftool



